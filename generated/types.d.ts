/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./../src/Interface/context"




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  Admin: { // root type
    password: string; // String!
    username: string; // String!
  }
  Mutation: {};
  Organization: { // root type
    address: string; // String!
    description: string; // String!
    email: string; // String!
    id: number; // Int!
    name: string; // String!
    password: string; // String!
    phone: string; // String!
    username: string; // String!
  }
  OrganizationSubmission: { // root type
    accepted: boolean; // Boolean!
    address: string; // String!
    description: string; // String!
    email: string; // String!
    id: number; // Int!
    name: string; // String!
    phone: string; // String!
  }
  Query: {};
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Admin: { // field return type
    password: string; // String!
    username: string; // String!
  }
  Mutation: { // field return type
    approveOrganization: NexusGenRootTypes['OrganizationSubmission']; // OrganizationSubmission!
    createOrganization: NexusGenRootTypes['Organization']; // Organization!
    deleteOrganization: NexusGenRootTypes['Organization']; // Organization!
    loginAdmin: string; // String!
    loginOrganization: string; // String!
    submmitOrganization: NexusGenRootTypes['OrganizationSubmission']; // OrganizationSubmission!
  }
  Organization: { // field return type
    address: string; // String!
    description: string; // String!
    email: string; // String!
    id: number; // Int!
    name: string; // String!
    password: string; // String!
    phone: string; // String!
    username: string; // String!
  }
  OrganizationSubmission: { // field return type
    accepted: boolean; // Boolean!
    address: string; // String!
    description: string; // String!
    email: string; // String!
    id: number; // Int!
    name: string; // String!
    phone: string; // String!
  }
  Query: { // field return type
    getAllOrganizations: NexusGenRootTypes['Organization'][]; // [Organization!]!
    getAllPendingSubmittedOrganizations: NexusGenRootTypes['OrganizationSubmission'][]; // [OrganizationSubmission!]!
    getAllSubmittedOrganizations: NexusGenRootTypes['OrganizationSubmission'][]; // [OrganizationSubmission!]!
    getSubmittedOrganizationById: NexusGenRootTypes['OrganizationSubmission'] | null; // OrganizationSubmission
  }
}

export interface NexusGenFieldTypeNames {
  Admin: { // field return type name
    password: 'String'
    username: 'String'
  }
  Mutation: { // field return type name
    approveOrganization: 'OrganizationSubmission'
    createOrganization: 'Organization'
    deleteOrganization: 'Organization'
    loginAdmin: 'String'
    loginOrganization: 'String'
    submmitOrganization: 'OrganizationSubmission'
  }
  Organization: { // field return type name
    address: 'String'
    description: 'String'
    email: 'String'
    id: 'Int'
    name: 'String'
    password: 'String'
    phone: 'String'
    username: 'String'
  }
  OrganizationSubmission: { // field return type name
    accepted: 'Boolean'
    address: 'String'
    description: 'String'
    email: 'String'
    id: 'Int'
    name: 'String'
    phone: 'String'
  }
  Query: { // field return type name
    getAllOrganizations: 'Organization'
    getAllPendingSubmittedOrganizations: 'OrganizationSubmission'
    getAllSubmittedOrganizations: 'OrganizationSubmission'
    getSubmittedOrganizationById: 'OrganizationSubmission'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    approveOrganization: { // args
      id: number; // Int!
    }
    createOrganization: { // args
      address: string; // String!
      description: string; // String!
      email: string; // String!
      name: string; // String!
      password: string; // String!
      phone: string; // String!
      username: string; // String!
    }
    deleteOrganization: { // args
      id: number; // Int!
    }
    loginAdmin: { // args
      password: string; // String!
      username: string; // String!
    }
    loginOrganization: { // args
      password: string; // String!
      username: string; // String!
    }
    submmitOrganization: { // args
      address: string; // String!
      description: string; // String!
      email: string; // String!
      name: string; // String!
      phone: string; // String!
    }
  }
  Query: {
    getSubmittedOrganizationById: { // args
      id: number; // Int!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}